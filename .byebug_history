c
Role.find(@user.role_id).role_type
@user.role_id
@user.role_id.role_type
@user
params
c
@user.role_id
@user
params
c
params
Inward.where(:warehouse_id=>x).where(:rail_status=>false).where(:updated_at=>params[:from]..params[:to4]).pluck(:total_quantity)
Inward.where(:warehouse_id=>x).where(:rail_status=>false).where(:updated_at=>params[:from]..params[:to4]).pluck
Inward.where(:warehouse_id=>x).where(:rail_status=>false).where(:updated_at=>params[:from]..params[:to4])
params
c
exit
params
parms
c
exit
c
params
c
params[:to4].present?
params[:to4]
params
c
params["_json"]
c
Packing.find(16)
params["_json"]
c
params["_json"]
c
params["_json"]
c
stock=Stock.find_by(:grade_id=>grade,:packing_id=>packing,:warehouse_id=>@warehouse_id)
packing=@outward[0].packing
packing=@outward[1].packing
grade=@outward[0].grading
grade=@outward[1].grading
@outward[0].grading
params["_json"]
params
c
ApprovalGradeDetail
OutwardApproval
params["_json"][i]
c
r.total_quantity.to_i/20.to_f
r.total_quantity/20.to_f
r.total_quantity
c
exit
params
c
params
data
c
OutwardManufactureDetail.where(:outward_id=>outward_id)
c
cc
c
cc
c
exit
Inward.new
k
k.image.id
k.image.id]
if Image.where(:id=>k.image_id)
c
exit
r.image
exit
r.image
r.image_id.images
r.image_id.image
r.image_id
r
c
Image.create(:image_path=>params[:image_path])
params[:image_path]
params
c
Damage.where(:warehouse_id=>@warehouse_id).last == nil
Damage.where(:warehouse_id=>@warehouse_id).last == nil;
Damage.where(:warehouse_id=>@warehouse_id).last.present?
Damage.where(:warehouse_id=>@warehouse_id).last
Damage.where(:warehouse_id=>@warehouse_id)
damage
exit
Inward.find(inward_id)
Inward.find(inward_manu_id)
c
params
c
Image.find(params[:id]).image_path.url
Image.find(params[:id]).image_path
image_path
c
image_path.url
image_path
c
Image.find(params[:id]).image_path.url
Image.find(params[:id]).image_path
Image.find(params[:id])
c
params
c
params
c
params
c
params
c
k.image_id
c
Damage.delete_all
OutwardManufactureDetail.delete_all
Outward.delete_all
InwardManufactureDetail.delete_all
InwardMufactureDetail.delete_all
Inward.delete_all
c
 Inward.find(inward_id)
c
 Inward.find(inward_id)
c
 Inward.find(inward_id)
c
 Inward.find(inward_id)
 Inward.find(inward_id).image
c
Inward.find(:id=>inward_id).image
c
Inward.find(inward_id).image
Inward.where(:id=>inward_id).image
Inward.where(:id=>inward_id)
Inward.find(225).update(:image_id=>40)
Image.last
Inward.where(:id=>inward_id)
c
inward_id
Inward.find(inward_id).image
c
Inward.find(inward_id).image
Inward.find(inward_id).images
Inward.find(inward_id)
c
data.id
render json: data
data
render data
render json: data
data
c
params
c
params
c
params
c
params
c
params
c
cc
c
model.class.to_s.underscore
image_params[:image_path]
image_params
c
params[:image_path]
params
c
Image.all
c
params
exit
c
params
c
path = "#{Rails.root}/public/temp_fol/temp1_file.png"
c
exit
File.open("#{Rails.root}/public/temp_fol/temp1_file.png","wb"){|pp| pp.write Base64.decode64(img_binary) }
img_binary = image_params[:image_path]
params
c
File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write Base64.decode64(img_binary) }
img_binary.each{|ll| File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write ll.blob }}
img_binary.each{|ll| File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write ll }}
img_binary.map{|ll| File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write ll }}
File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write img_binary }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","w"){|pp| pp.write img_binary }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","w"){|pp| BinData::Int32be.new(img_binary).write(pp) }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","w"){|pp| pp.write img_binary.read }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","w+b"){|pp| pp.write img_binary.blob }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","w+b"){|pp| pp.write img_binary }
File.new("#{Rails.root}/public/temp_fol/temp_file.gif","w+b"){|pp| pp.write img_binary }
File.new("#{Rails.root}/public/temp_fol/temp_file.png","w+b"){|pp| pp.write img_binary }
("#{Rails.root}/public/temp_fol/temp_file.png")
File.remove("#{Rails.root}/public/temp_fol/temp_file.png")
File.rm_ff("#{Rails.root}/public/temp_fol/temp_file.png")
File.rm("#{Rails.root}/public/temp_fol/temp_file.png")
File.new("#{Rails.root}/public/temp_fol/temp_file.png","w+b"){|pp| pp.write img_binary.encode }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","w+b"){|pp| pp.write img_binary.encode }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","w+b"){|pp| pp.write img_binary.decoded }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write img_binary.blob }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write img_binary.encode }
File.open("#{Rails.root}/public/temp_fol/temp_file.png","wb"){|pp| pp.write img_binary.decoded }
File.open("#{Rails.root}/public/temp_fol/temp_file.jpeg","wb"){|pp| pp.write img_binary.decoded }
File.open("#{Rails.root}/public/temp_fol/temp_file.jpeg","w"){|pp| pp.write(img_binary.decoded)}
File.open("#{Rails.root}/public/temp_fol/temp_file.jpeg","wb"){|pp| pp.write img_binary.encode }
File.open("#{Rails.root}/public/temp_fol/temp_file.jpeg","w"){|pp| pp.write(img_binary.encode)}
File.open("#{Rails.root}/public/temp_fol/temp_file.jpeg","w"){|pp| pp.write(img_binary.decode)}
File.open("#{Rails.root}/public/temp_fol/temp_file.jpeg","rb"){|pp| pp.write(img_binary.decode)}
img_binary = image_params[:image_path]
image_params[:image_path]
Dir.mkdir("#{Rails.root}/public/temp_fol")
Dir.mkdir("#{Rails.root}/Public/temp_fol")
FileUtils.mkdir("#{Rails.root}/Public/temp_fol")
Dir.mkdir("#{Rails.root}/Public/temp_fol")
File.utils_mkdir("#{Rails.root}/Public/temp_fol")
File.mk_dir("#{Rails.root}/Public/temp_fol")
File.mkdir("#{Rails.root}/Public/temp_fol")
image_params[:image_path]
image_params
exit
c
exit
params[:image_path].size
params[:image_path]
File.open("/home/altius/manoj.r/data.jpeg", "wb"){|f| f.write(Base64.decode64(params[:image_path]))}
Base64.decode64(data)
data = params[:image_path]
Base64.decode64(params[:image_path])
File.open("/home/altius/manoj.r/data.jpeg", "wb").each{|f| f.write(Base64.decode64(params[:image_path]))}
File.open("/home/altius/manoj.r/data.jpeg", "wb").do{|f| f.write(Base64.decode64(params[:image_path]))}
File.open("/home/altius/manoj.r/data.jpeg", "wb") do |f|
require 'base64'
params[:image_path]
params[:
params[
c
exit
Bitmap
JSON.parse params[:image_path]
params[:image_path]
params[:image_path].class
params[:image_path]
File.open("/home/altius/manoj.r/nnn.png","w").map{|l| l.write enc.decoded}
File.open("/home/altius/manoj.r/new.png","w").map{|l| l.write enc.decode}
